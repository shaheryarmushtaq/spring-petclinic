name: CI/CD Pipelines

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: self-hosted
    steps:
      - name: Add MySQL APT Repository Key
        timeout-minutes: 2  # Set a 2-minute timeout for this step
        continue-on-error: true  # Skip the error and continue
        run: |
          echo "Adding MySQL APT repository key..."
          curl -fsSL https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/mysql.gpg

      - name: Check for Git
        continue-on-error: true  # Skip the error and continue
        run: |
          if ! command -v git &> /dev/null
          then
              echo "Git not found, installing..."
              sudo apt-get update
              sudo apt-get install -y git
          else
              echo "Git is already installed."
          fi

      - name: Install Java 17
        continue-on-error: true  # Skip the error and continue
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
          java -version

      - name: Validate Installation
        continue-on-error: true  # Skip the error and continue
        run: |
          echo "Validating installation..."
          command -v git
          command -v docker
          command -v docker-compose
          command -v mvn

  build:
    runs-on: self-hosted
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Build with Maven
        continue-on-error: true  # Skip the error and continue
        run: ./mvnw -B package

  test:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Run tests
        continue-on-error: true  # Skip the error and continue
        run: ./mvnw test

  deploy:
    runs-on: self-hosted
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify JAR file
        continue-on-error: true  # Skip the error and continue
        run: |
          echo "Verifying JAR file presence..."
          ls -al /home/sheri/spring-petclinic/target/
          if [ -z "$(find /home/sheri/spring-petclinic/target/ -name 'spring-petclinic-3.3.0-SNAPSHOT.jar')" ]; then
            echo "JAR file not found in target directory!"
            exit 1
          fi

      - name: Setup SSH
        continue-on-error: true  # Skip the error and continue
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts || true

      - name: Deploy application
        continue-on-error: true  # Skip the error and continue
        env:
          DEPLOY_SERVER: '103.172.26.36'
          DEPLOY_PORT: '8080'
          DEPLOY_USER: 'sheri'
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "Deploying application to $DEPLOY_SERVER"
          scp -i ~/.ssh/id_rsa /home/sheri/spring-petclinic/target/spring-petclinic-3.3.0-SNAPSHOT.jar $DEPLOY_USER@$DEPLOY_SERVER:/home/sheri/spring-petclinic/
          ssh -i ~/.ssh/id_rsa $DEPLOY_USER@$DEPLOY_SERVER "nohup java -jar /home/sheri/spring-petclinic/spring-petclinic-3.3.0-SNAPSHOT.jar > /dev/null 2>&1 &"
          rm -f ~/.ssh/id_rsa

      - name: Wait for application to start
        continue-on-error: true  # Skip the error and continue
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -s http://103.172.26.36:8080 > /dev/null; then
              echo "Application is up!"
              break
            else
              echo "Application is not up yet, retrying in 10 seconds..."
              sleep 10
            fi
          done